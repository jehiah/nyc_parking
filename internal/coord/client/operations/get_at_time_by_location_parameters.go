// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetAtTimeByLocationParams creates a new GetAtTimeByLocationParams object
// with the default values initialized.
func NewGetAtTimeByLocationParams() *GetAtTimeByLocationParams {
	var ()
	return &GetAtTimeByLocationParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetAtTimeByLocationParamsWithTimeout creates a new GetAtTimeByLocationParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetAtTimeByLocationParamsWithTimeout(timeout time.Duration) *GetAtTimeByLocationParams {
	var ()
	return &GetAtTimeByLocationParams{

		timeout: timeout,
	}
}

// NewGetAtTimeByLocationParamsWithContext creates a new GetAtTimeByLocationParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetAtTimeByLocationParamsWithContext(ctx context.Context) *GetAtTimeByLocationParams {
	var ()
	return &GetAtTimeByLocationParams{

		Context: ctx,
	}
}

// NewGetAtTimeByLocationParamsWithHTTPClient creates a new GetAtTimeByLocationParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetAtTimeByLocationParamsWithHTTPClient(client *http.Client) *GetAtTimeByLocationParams {
	var ()
	return &GetAtTimeByLocationParams{
		HTTPClient: client,
	}
}

/*GetAtTimeByLocationParams contains all the parameters to send to the API endpoint
for the get at time by location operation typically these are written to a http.Request
*/
type GetAtTimeByLocationParams struct {

	/*AccessKey
	  The API access key for the request.

	*/
	AccessKey string
	/*DurationH
	  If `primary_use` or `permitted_use` is set AND `duration_h` is set, only return
	segments that allow the given use for at least this long.


	*/
	DurationH *float64
	/*Latitude
	  Latitude to return results for.

	*/
	Latitude float64
	/*Longitude
	  Longitude to return results for.

	*/
	Longitude float64
	/*PermittedUse
	  If set, only return segments that permit this use at this time.

	*/
	PermittedUse *string
	/*PrimaryUse
	  If set, only return segments that have this primary use at this time.

	*/
	PrimaryUse *string
	/*RadiusKm
	  Distance, in kilometers, from (latitude, longitude) we will return
	results for.


	*/
	RadiusKm float64
	/*Time
	  The time (in ISO-8601 format) to find the rules for. If not provided, we will use the current time.


	*/
	Time *strfmt.DateTime
	/*VehicleType
	  If `primary_use` or `permitted_use` is set AND `vehicle_type` is set, only return
	segments whose primary or permitted use, respectively, includes this vehicle type at
	this time. Setting `vehicle_type=all` will only return segments that permit every
	vehicle to engage in the use, while setting `primary_use` or `permitted_use`
	**without** setting `vehicle_type` returns segments that allow at least one kind of
	vehicle to engage in the use.


	*/
	VehicleType *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get at time by location params
func (o *GetAtTimeByLocationParams) WithTimeout(timeout time.Duration) *GetAtTimeByLocationParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get at time by location params
func (o *GetAtTimeByLocationParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get at time by location params
func (o *GetAtTimeByLocationParams) WithContext(ctx context.Context) *GetAtTimeByLocationParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get at time by location params
func (o *GetAtTimeByLocationParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get at time by location params
func (o *GetAtTimeByLocationParams) WithHTTPClient(client *http.Client) *GetAtTimeByLocationParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get at time by location params
func (o *GetAtTimeByLocationParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAccessKey adds the accessKey to the get at time by location params
func (o *GetAtTimeByLocationParams) WithAccessKey(accessKey string) *GetAtTimeByLocationParams {
	o.SetAccessKey(accessKey)
	return o
}

// SetAccessKey adds the accessKey to the get at time by location params
func (o *GetAtTimeByLocationParams) SetAccessKey(accessKey string) {
	o.AccessKey = accessKey
}

// WithDurationH adds the durationH to the get at time by location params
func (o *GetAtTimeByLocationParams) WithDurationH(durationH *float64) *GetAtTimeByLocationParams {
	o.SetDurationH(durationH)
	return o
}

// SetDurationH adds the durationH to the get at time by location params
func (o *GetAtTimeByLocationParams) SetDurationH(durationH *float64) {
	o.DurationH = durationH
}

// WithLatitude adds the latitude to the get at time by location params
func (o *GetAtTimeByLocationParams) WithLatitude(latitude float64) *GetAtTimeByLocationParams {
	o.SetLatitude(latitude)
	return o
}

// SetLatitude adds the latitude to the get at time by location params
func (o *GetAtTimeByLocationParams) SetLatitude(latitude float64) {
	o.Latitude = latitude
}

// WithLongitude adds the longitude to the get at time by location params
func (o *GetAtTimeByLocationParams) WithLongitude(longitude float64) *GetAtTimeByLocationParams {
	o.SetLongitude(longitude)
	return o
}

// SetLongitude adds the longitude to the get at time by location params
func (o *GetAtTimeByLocationParams) SetLongitude(longitude float64) {
	o.Longitude = longitude
}

// WithPermittedUse adds the permittedUse to the get at time by location params
func (o *GetAtTimeByLocationParams) WithPermittedUse(permittedUse *string) *GetAtTimeByLocationParams {
	o.SetPermittedUse(permittedUse)
	return o
}

// SetPermittedUse adds the permittedUse to the get at time by location params
func (o *GetAtTimeByLocationParams) SetPermittedUse(permittedUse *string) {
	o.PermittedUse = permittedUse
}

// WithPrimaryUse adds the primaryUse to the get at time by location params
func (o *GetAtTimeByLocationParams) WithPrimaryUse(primaryUse *string) *GetAtTimeByLocationParams {
	o.SetPrimaryUse(primaryUse)
	return o
}

// SetPrimaryUse adds the primaryUse to the get at time by location params
func (o *GetAtTimeByLocationParams) SetPrimaryUse(primaryUse *string) {
	o.PrimaryUse = primaryUse
}

// WithRadiusKm adds the radiusKm to the get at time by location params
func (o *GetAtTimeByLocationParams) WithRadiusKm(radiusKm float64) *GetAtTimeByLocationParams {
	o.SetRadiusKm(radiusKm)
	return o
}

// SetRadiusKm adds the radiusKm to the get at time by location params
func (o *GetAtTimeByLocationParams) SetRadiusKm(radiusKm float64) {
	o.RadiusKm = radiusKm
}

// WithTime adds the time to the get at time by location params
func (o *GetAtTimeByLocationParams) WithTime(time *strfmt.DateTime) *GetAtTimeByLocationParams {
	o.SetTime(time)
	return o
}

// SetTime adds the time to the get at time by location params
func (o *GetAtTimeByLocationParams) SetTime(time *strfmt.DateTime) {
	o.Time = time
}

// WithVehicleType adds the vehicleType to the get at time by location params
func (o *GetAtTimeByLocationParams) WithVehicleType(vehicleType *string) *GetAtTimeByLocationParams {
	o.SetVehicleType(vehicleType)
	return o
}

// SetVehicleType adds the vehicleType to the get at time by location params
func (o *GetAtTimeByLocationParams) SetVehicleType(vehicleType *string) {
	o.VehicleType = vehicleType
}

// WriteToRequest writes these params to a swagger request
func (o *GetAtTimeByLocationParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param access_key
	qrAccessKey := o.AccessKey
	qAccessKey := qrAccessKey
	if qAccessKey != "" {
		if err := r.SetQueryParam("access_key", qAccessKey); err != nil {
			return err
		}
	}

	if o.DurationH != nil {

		// query param duration_h
		var qrDurationH float64
		if o.DurationH != nil {
			qrDurationH = *o.DurationH
		}
		qDurationH := swag.FormatFloat64(qrDurationH)
		if qDurationH != "" {
			if err := r.SetQueryParam("duration_h", qDurationH); err != nil {
				return err
			}
		}

	}

	// query param latitude
	qrLatitude := o.Latitude
	qLatitude := swag.FormatFloat64(qrLatitude)
	if qLatitude != "" {
		if err := r.SetQueryParam("latitude", qLatitude); err != nil {
			return err
		}
	}

	// query param longitude
	qrLongitude := o.Longitude
	qLongitude := swag.FormatFloat64(qrLongitude)
	if qLongitude != "" {
		if err := r.SetQueryParam("longitude", qLongitude); err != nil {
			return err
		}
	}

	if o.PermittedUse != nil {

		// query param permitted_use
		var qrPermittedUse string
		if o.PermittedUse != nil {
			qrPermittedUse = *o.PermittedUse
		}
		qPermittedUse := qrPermittedUse
		if qPermittedUse != "" {
			if err := r.SetQueryParam("permitted_use", qPermittedUse); err != nil {
				return err
			}
		}

	}

	if o.PrimaryUse != nil {

		// query param primary_use
		var qrPrimaryUse string
		if o.PrimaryUse != nil {
			qrPrimaryUse = *o.PrimaryUse
		}
		qPrimaryUse := qrPrimaryUse
		if qPrimaryUse != "" {
			if err := r.SetQueryParam("primary_use", qPrimaryUse); err != nil {
				return err
			}
		}

	}

	// query param radius_km
	qrRadiusKm := o.RadiusKm
	qRadiusKm := swag.FormatFloat64(qrRadiusKm)
	if qRadiusKm != "" {
		if err := r.SetQueryParam("radius_km", qRadiusKm); err != nil {
			return err
		}
	}

	if o.Time != nil {

		// query param time
		var qrTime strfmt.DateTime
		if o.Time != nil {
			qrTime = *o.Time
		}
		qTime := qrTime.String()
		if qTime != "" {
			if err := r.SetQueryParam("time", qTime); err != nil {
				return err
			}
		}

	}

	if o.VehicleType != nil {

		// query param vehicle_type
		var qrVehicleType string
		if o.VehicleType != nil {
			qrVehicleType = *o.VehicleType
		}
		qVehicleType := qrVehicleType
		if qVehicleType != "" {
			if err := r.SetQueryParam("vehicle_type", qVehicleType); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
