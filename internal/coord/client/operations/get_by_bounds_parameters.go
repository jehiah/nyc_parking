// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetByBoundsParams creates a new GetByBoundsParams object
// with the default values initialized.
func NewGetByBoundsParams() *GetByBoundsParams {
	var ()
	return &GetByBoundsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetByBoundsParamsWithTimeout creates a new GetByBoundsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetByBoundsParamsWithTimeout(timeout time.Duration) *GetByBoundsParams {
	var ()
	return &GetByBoundsParams{

		timeout: timeout,
	}
}

// NewGetByBoundsParamsWithContext creates a new GetByBoundsParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetByBoundsParamsWithContext(ctx context.Context) *GetByBoundsParams {
	var ()
	return &GetByBoundsParams{

		Context: ctx,
	}
}

// NewGetByBoundsParamsWithHTTPClient creates a new GetByBoundsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetByBoundsParamsWithHTTPClient(client *http.Client) *GetByBoundsParams {
	var ()
	return &GetByBoundsParams{
		HTTPClient: client,
	}
}

/*GetByBoundsParams contains all the parameters to send to the API endpoint
for the get by bounds operation typically these are written to a http.Request
*/
type GetByBoundsParams struct {

	/*AccessKey
	  The API access key for the request.

	*/
	AccessKey string
	/*MaxLatitude
	  The largest latitude to return results for.

	*/
	MaxLatitude float64
	/*MaxLongitude
	  The largest longitude to return results for.

	*/
	MaxLongitude float64
	/*MinLatitude
	  The smallest latitude to return results for.

	*/
	MinLatitude float64
	/*MinLongitude
	  The smallest longitude to return results for.

	*/
	MinLongitude float64
	/*PermittedUse
	  If set, only return segments that permit this use at some point in time.

	*/
	PermittedUse *string
	/*PrimaryUse
	  If set, only return segments that have this primary use at some point in time.


	*/
	PrimaryUse *string
	/*TempRulesWindowEnd
	  We will return any temporary rules we find that are in effect at or before this time, in ISO-8601 format.
	Defaults to 7 days after `temp_rules_window_start`.


	*/
	TempRulesWindowEnd *strfmt.DateTime
	/*TempRulesWindowStart
	  We will return any temporary rules we find that are in effect at or after this time, in ISO-8601 format.
	Defaults to the current time.


	*/
	TempRulesWindowStart *strfmt.DateTime
	/*VehicleType
	  If `primary_use` or `permitted_use` is set AND `vehicle_type` is set, only return
	segments whose primary or permitted use, respectively, includes this vehicle type.
	`vehicle_type=all` will only return segments that permit every vehicle to engage
	in the use, while setting `primary_use` or `permitted_use` **without** setting
	`vehicle_type` returns segments that allow at least one kind of vehicle to engage
	in the use.


	*/
	VehicleType *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get by bounds params
func (o *GetByBoundsParams) WithTimeout(timeout time.Duration) *GetByBoundsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get by bounds params
func (o *GetByBoundsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get by bounds params
func (o *GetByBoundsParams) WithContext(ctx context.Context) *GetByBoundsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get by bounds params
func (o *GetByBoundsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get by bounds params
func (o *GetByBoundsParams) WithHTTPClient(client *http.Client) *GetByBoundsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get by bounds params
func (o *GetByBoundsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAccessKey adds the accessKey to the get by bounds params
func (o *GetByBoundsParams) WithAccessKey(accessKey string) *GetByBoundsParams {
	o.SetAccessKey(accessKey)
	return o
}

// SetAccessKey adds the accessKey to the get by bounds params
func (o *GetByBoundsParams) SetAccessKey(accessKey string) {
	o.AccessKey = accessKey
}

// WithMaxLatitude adds the maxLatitude to the get by bounds params
func (o *GetByBoundsParams) WithMaxLatitude(maxLatitude float64) *GetByBoundsParams {
	o.SetMaxLatitude(maxLatitude)
	return o
}

// SetMaxLatitude adds the maxLatitude to the get by bounds params
func (o *GetByBoundsParams) SetMaxLatitude(maxLatitude float64) {
	o.MaxLatitude = maxLatitude
}

// WithMaxLongitude adds the maxLongitude to the get by bounds params
func (o *GetByBoundsParams) WithMaxLongitude(maxLongitude float64) *GetByBoundsParams {
	o.SetMaxLongitude(maxLongitude)
	return o
}

// SetMaxLongitude adds the maxLongitude to the get by bounds params
func (o *GetByBoundsParams) SetMaxLongitude(maxLongitude float64) {
	o.MaxLongitude = maxLongitude
}

// WithMinLatitude adds the minLatitude to the get by bounds params
func (o *GetByBoundsParams) WithMinLatitude(minLatitude float64) *GetByBoundsParams {
	o.SetMinLatitude(minLatitude)
	return o
}

// SetMinLatitude adds the minLatitude to the get by bounds params
func (o *GetByBoundsParams) SetMinLatitude(minLatitude float64) {
	o.MinLatitude = minLatitude
}

// WithMinLongitude adds the minLongitude to the get by bounds params
func (o *GetByBoundsParams) WithMinLongitude(minLongitude float64) *GetByBoundsParams {
	o.SetMinLongitude(minLongitude)
	return o
}

// SetMinLongitude adds the minLongitude to the get by bounds params
func (o *GetByBoundsParams) SetMinLongitude(minLongitude float64) {
	o.MinLongitude = minLongitude
}

// WithPermittedUse adds the permittedUse to the get by bounds params
func (o *GetByBoundsParams) WithPermittedUse(permittedUse *string) *GetByBoundsParams {
	o.SetPermittedUse(permittedUse)
	return o
}

// SetPermittedUse adds the permittedUse to the get by bounds params
func (o *GetByBoundsParams) SetPermittedUse(permittedUse *string) {
	o.PermittedUse = permittedUse
}

// WithPrimaryUse adds the primaryUse to the get by bounds params
func (o *GetByBoundsParams) WithPrimaryUse(primaryUse *string) *GetByBoundsParams {
	o.SetPrimaryUse(primaryUse)
	return o
}

// SetPrimaryUse adds the primaryUse to the get by bounds params
func (o *GetByBoundsParams) SetPrimaryUse(primaryUse *string) {
	o.PrimaryUse = primaryUse
}

// WithTempRulesWindowEnd adds the tempRulesWindowEnd to the get by bounds params
func (o *GetByBoundsParams) WithTempRulesWindowEnd(tempRulesWindowEnd *strfmt.DateTime) *GetByBoundsParams {
	o.SetTempRulesWindowEnd(tempRulesWindowEnd)
	return o
}

// SetTempRulesWindowEnd adds the tempRulesWindowEnd to the get by bounds params
func (o *GetByBoundsParams) SetTempRulesWindowEnd(tempRulesWindowEnd *strfmt.DateTime) {
	o.TempRulesWindowEnd = tempRulesWindowEnd
}

// WithTempRulesWindowStart adds the tempRulesWindowStart to the get by bounds params
func (o *GetByBoundsParams) WithTempRulesWindowStart(tempRulesWindowStart *strfmt.DateTime) *GetByBoundsParams {
	o.SetTempRulesWindowStart(tempRulesWindowStart)
	return o
}

// SetTempRulesWindowStart adds the tempRulesWindowStart to the get by bounds params
func (o *GetByBoundsParams) SetTempRulesWindowStart(tempRulesWindowStart *strfmt.DateTime) {
	o.TempRulesWindowStart = tempRulesWindowStart
}

// WithVehicleType adds the vehicleType to the get by bounds params
func (o *GetByBoundsParams) WithVehicleType(vehicleType *string) *GetByBoundsParams {
	o.SetVehicleType(vehicleType)
	return o
}

// SetVehicleType adds the vehicleType to the get by bounds params
func (o *GetByBoundsParams) SetVehicleType(vehicleType *string) {
	o.VehicleType = vehicleType
}

// WriteToRequest writes these params to a swagger request
func (o *GetByBoundsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param access_key
	qrAccessKey := o.AccessKey
	qAccessKey := qrAccessKey
	if qAccessKey != "" {
		if err := r.SetQueryParam("access_key", qAccessKey); err != nil {
			return err
		}
	}

	// query param max_latitude
	qrMaxLatitude := o.MaxLatitude
	qMaxLatitude := swag.FormatFloat64(qrMaxLatitude)
	if qMaxLatitude != "" {
		if err := r.SetQueryParam("max_latitude", qMaxLatitude); err != nil {
			return err
		}
	}

	// query param max_longitude
	qrMaxLongitude := o.MaxLongitude
	qMaxLongitude := swag.FormatFloat64(qrMaxLongitude)
	if qMaxLongitude != "" {
		if err := r.SetQueryParam("max_longitude", qMaxLongitude); err != nil {
			return err
		}
	}

	// query param min_latitude
	qrMinLatitude := o.MinLatitude
	qMinLatitude := swag.FormatFloat64(qrMinLatitude)
	if qMinLatitude != "" {
		if err := r.SetQueryParam("min_latitude", qMinLatitude); err != nil {
			return err
		}
	}

	// query param min_longitude
	qrMinLongitude := o.MinLongitude
	qMinLongitude := swag.FormatFloat64(qrMinLongitude)
	if qMinLongitude != "" {
		if err := r.SetQueryParam("min_longitude", qMinLongitude); err != nil {
			return err
		}
	}

	if o.PermittedUse != nil {

		// query param permitted_use
		var qrPermittedUse string
		if o.PermittedUse != nil {
			qrPermittedUse = *o.PermittedUse
		}
		qPermittedUse := qrPermittedUse
		if qPermittedUse != "" {
			if err := r.SetQueryParam("permitted_use", qPermittedUse); err != nil {
				return err
			}
		}

	}

	if o.PrimaryUse != nil {

		// query param primary_use
		var qrPrimaryUse string
		if o.PrimaryUse != nil {
			qrPrimaryUse = *o.PrimaryUse
		}
		qPrimaryUse := qrPrimaryUse
		if qPrimaryUse != "" {
			if err := r.SetQueryParam("primary_use", qPrimaryUse); err != nil {
				return err
			}
		}

	}

	if o.TempRulesWindowEnd != nil {

		// query param temp_rules_window_end
		var qrTempRulesWindowEnd strfmt.DateTime
		if o.TempRulesWindowEnd != nil {
			qrTempRulesWindowEnd = *o.TempRulesWindowEnd
		}
		qTempRulesWindowEnd := qrTempRulesWindowEnd.String()
		if qTempRulesWindowEnd != "" {
			if err := r.SetQueryParam("temp_rules_window_end", qTempRulesWindowEnd); err != nil {
				return err
			}
		}

	}

	if o.TempRulesWindowStart != nil {

		// query param temp_rules_window_start
		var qrTempRulesWindowStart strfmt.DateTime
		if o.TempRulesWindowStart != nil {
			qrTempRulesWindowStart = *o.TempRulesWindowStart
		}
		qTempRulesWindowStart := qrTempRulesWindowStart.String()
		if qTempRulesWindowStart != "" {
			if err := r.SetQueryParam("temp_rules_window_start", qTempRulesWindowStart); err != nil {
				return err
			}
		}

	}

	if o.VehicleType != nil {

		// query param vehicle_type
		var qrVehicleType string
		if o.VehicleType != nil {
			qrVehicleType = *o.VehicleType
		}
		qVehicleType := qrVehicleType
		if qVehicleType != "" {
			if err := r.SetQueryParam("vehicle_type", qVehicleType); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
