// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new operations API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for operations API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
GetAtTimeByBounds finds the rules for all curbs within a bounding box at a particular time
*/
func (a *Client) GetAtTimeByBounds(params *GetAtTimeByBoundsParams, authInfo runtime.ClientAuthInfoWriter) (*GetAtTimeByBoundsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAtTimeByBoundsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_at_time_by_bounds",
		Method:             "GET",
		PathPattern:        "/bybounds/time_rules",
		ProducesMediaTypes: []string{"application/vnd.geo+json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAtTimeByBoundsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAtTimeByBoundsOK), nil

}

/*
GetAtTimeByCurbID finds the rules on a single curb at a certain time
*/
func (a *Client) GetAtTimeByCurbID(params *GetAtTimeByCurbIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetAtTimeByCurbIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAtTimeByCurbIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_at_time_by_curb_id",
		Method:             "GET",
		PathPattern:        "/bycurb/{id}/time_rules",
		ProducesMediaTypes: []string{"application/vnd.geo+json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAtTimeByCurbIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAtTimeByCurbIDOK), nil

}

/*
GetAtTimeByLocation finds the rules for curbs near a location at a certain time

Find the rules for a given curb at a given time and on a given day. You can also use this
to find all of the places that it is possible to perform a given action (for instance, find
all the loading zones, or everywhere with two-hour parking).

*/
func (a *Client) GetAtTimeByLocation(params *GetAtTimeByLocationParams, authInfo runtime.ClientAuthInfoWriter) (*GetAtTimeByLocationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAtTimeByLocationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_at_time_by_location",
		Method:             "GET",
		PathPattern:        "/bylocation/time_rules",
		ProducesMediaTypes: []string{"application/vnd.geo+json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAtTimeByLocationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAtTimeByLocationOK), nil

}

/*
GetByBounds finds the rules for all curbs within a bounding box
*/
func (a *Client) GetByBounds(params *GetByBoundsParams, authInfo runtime.ClientAuthInfoWriter) (*GetByBoundsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetByBoundsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_by_bounds",
		Method:             "GET",
		PathPattern:        "/bybounds/all_rules",
		ProducesMediaTypes: []string{"application/vnd.geo+json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetByBoundsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetByBoundsOK), nil

}

/*
GetByCurbID finds the rules on single curb
*/
func (a *Client) GetByCurbID(params *GetByCurbIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetByCurbIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetByCurbIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_by_curb_id",
		Method:             "GET",
		PathPattern:        "/bycurb/{id}/all_rules",
		ProducesMediaTypes: []string{"application/vnd.geo+json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetByCurbIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetByCurbIDOK), nil

}

/*
GetByLocation finds the rules for curbs near a location

Find all of the curbs within a given radius of a particular point, and return all of their
rules across all times of day, days of the week, times of year, etc.

*/
func (a *Client) GetByLocation(params *GetByLocationParams, authInfo runtime.ClientAuthInfoWriter) (*GetByLocationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetByLocationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_by_location",
		Method:             "GET",
		PathPattern:        "/bylocation/all_rules",
		ProducesMediaTypes: []string{"application/vnd.geo+json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetByLocationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetByLocationOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
