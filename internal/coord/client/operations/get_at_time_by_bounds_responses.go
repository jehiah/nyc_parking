// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/jehiah/nyc_parking/internal/coord/models"
)

// GetAtTimeByBoundsReader is a Reader for the GetAtTimeByBounds structure.
type GetAtTimeByBoundsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetAtTimeByBoundsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetAtTimeByBoundsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 403:
		result := NewGetAtTimeByBoundsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewGetAtTimeByBoundsDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetAtTimeByBoundsOK creates a GetAtTimeByBoundsOK with default headers values
func NewGetAtTimeByBoundsOK() *GetAtTimeByBoundsOK {
	return &GetAtTimeByBoundsOK{}
}

/*GetAtTimeByBoundsOK handles this case with default header values.

Segments of all curbs within the bounding box, in arbitrary order.
*/
type GetAtTimeByBoundsOK struct {
	Payload *models.SegmentTimeFeatureCollection
}

func (o *GetAtTimeByBoundsOK) Error() string {
	return fmt.Sprintf("[GET /bybounds/time_rules][%d] getAtTimeByBoundsOK  %+v", 200, o.Payload)
}

func (o *GetAtTimeByBoundsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.SegmentTimeFeatureCollection)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAtTimeByBoundsForbidden creates a GetAtTimeByBoundsForbidden with default headers values
func NewGetAtTimeByBoundsForbidden() *GetAtTimeByBoundsForbidden {
	return &GetAtTimeByBoundsForbidden{}
}

/*GetAtTimeByBoundsForbidden handles this case with default header values.

This method requires an `access_key` and it is either missing or invalid, or the the credentials provided are not sufficient for access to the specified resource.
*/
type GetAtTimeByBoundsForbidden struct {
	Payload *models.Error
}

func (o *GetAtTimeByBoundsForbidden) Error() string {
	return fmt.Sprintf("[GET /bybounds/time_rules][%d] getAtTimeByBoundsForbidden  %+v", 403, o.Payload)
}

func (o *GetAtTimeByBoundsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAtTimeByBoundsDefault creates a GetAtTimeByBoundsDefault with default headers values
func NewGetAtTimeByBoundsDefault(code int) *GetAtTimeByBoundsDefault {
	return &GetAtTimeByBoundsDefault{
		_statusCode: code,
	}
}

/*GetAtTimeByBoundsDefault handles this case with default header values.

Unexpected error
*/
type GetAtTimeByBoundsDefault struct {
	_statusCode int

	Payload *models.Error
}

// Code gets the status code for the get at time by bounds default response
func (o *GetAtTimeByBoundsDefault) Code() int {
	return o._statusCode
}

func (o *GetAtTimeByBoundsDefault) Error() string {
	return fmt.Sprintf("[GET /bybounds/time_rules][%d] get_at_time_by_bounds default  %+v", o._statusCode, o.Payload)
}

func (o *GetAtTimeByBoundsDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
