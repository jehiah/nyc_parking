// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SegmentTimeUses Rules for a particuar segment of street at a particular time. `use` and `vehicle_type`
// contain the primary use this segment is signed for at this time, and `permitted_uses` contains
// all the uses that can be performed, and for how long.
//
// swagger:model SegmentTimeUses
type SegmentTimeUses struct {

	// All the uses that are permitted, including the primary use.
	Permitted []*SegmentTimeUse `json:"permitted"`

	// If present, the time (in ISO-8601 format) when the primary use stops being primary.
	// This may not mean that the use stops being permitted. For instance, if a segment is a
	// commercial loading zone until 8pm, commercial vehicles may still load thereafter but
	// commercial loading will not be the primary use. If empty, the primary use remains in
	// effect for at least the next 24 hours.
	//
	// Format: date-time
	PrimaryUntil *strfmt.DateTime `json:"primary_until,omitempty"`

	// use
	Use Uses `json:"use,omitempty"`

	// vehicle type
	VehicleType VehicleTypes `json:"vehicle_type,omitempty"`
}

// Validate validates this segment time uses
func (m *SegmentTimeUses) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePermitted(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrimaryUntil(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUse(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVehicleType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SegmentTimeUses) validatePermitted(formats strfmt.Registry) error {

	if swag.IsZero(m.Permitted) { // not required
		return nil
	}

	for i := 0; i < len(m.Permitted); i++ {
		if swag.IsZero(m.Permitted[i]) { // not required
			continue
		}

		if m.Permitted[i] != nil {
			if err := m.Permitted[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("permitted" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SegmentTimeUses) validatePrimaryUntil(formats strfmt.Registry) error {

	if swag.IsZero(m.PrimaryUntil) { // not required
		return nil
	}

	if err := validate.FormatOf("primary_until", "body", "date-time", m.PrimaryUntil.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *SegmentTimeUses) validateUse(formats strfmt.Registry) error {

	if swag.IsZero(m.Use) { // not required
		return nil
	}

	if err := m.Use.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("use")
		}
		return err
	}

	return nil
}

func (m *SegmentTimeUses) validateVehicleType(formats strfmt.Registry) error {

	if swag.IsZero(m.VehicleType) { // not required
		return nil
	}

	if err := m.VehicleType.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("vehicle_type")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SegmentTimeUses) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SegmentTimeUses) UnmarshalBinary(b []byte) error {
	var res SegmentTimeUses
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
