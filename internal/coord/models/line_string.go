// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// LineString A GeoJSON LineString geometry.
// swagger:model LineString
type LineString struct {

	// coordinates
	Coordinates [][]float64 `json:"coordinates"`

	// type
	// Enum: [LineString]
	Type string `json:"type,omitempty"`
}

// Validate validates this line string
func (m *LineString) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCoordinates(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LineString) validateCoordinates(formats strfmt.Registry) error {

	if swag.IsZero(m.Coordinates) { // not required
		return nil
	}

	for i := 0; i < len(m.Coordinates); i++ {

		iiCoordinatesSize := int64(len(m.Coordinates[i]))

		if err := validate.MinItems("coordinates"+"."+strconv.Itoa(i), "body", iiCoordinatesSize, 2); err != nil {
			return err
		}

		if err := validate.MaxItems("coordinates"+"."+strconv.Itoa(i), "body", iiCoordinatesSize, 2); err != nil {
			return err
		}

	}

	return nil
}

var lineStringTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["LineString"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		lineStringTypeTypePropEnum = append(lineStringTypeTypePropEnum, v)
	}
}

const (

	// LineStringTypeLineString captures enum value "LineString"
	LineStringTypeLineString string = "LineString"
)

// prop value enum
func (m *LineString) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, lineStringTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *LineString) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *LineString) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LineString) UnmarshalBinary(b []byte) error {
	var res LineString
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
