// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SegmentMetadata Identifying information for a particular segment of curb.
// swagger:model SegmentMetadata
type SegmentMetadata struct {

	// The ID of the curb that this segment is on.
	CurbID string `json:"curb_id,omitempty"`

	// The distance from the start of the curb where this segment ends, in meters.
	//
	DistanceEndMeters float64 `json:"distance_end_meters,omitempty"`

	// The distance from the start of the curb where this segment begins, in meters.
	//
	DistanceStartMeters float64 `json:"distance_start_meters,omitempty"`

	// The name of the street where this segment's curb ends. distance_end_meters is measured
	// from this street.
	//
	EndStreetName string `json:"end_street_name,omitempty"`

	// The side of the street this segment is on, as a compass direction.
	//
	// Enum: [N NE E SE S SW W NW]
	SideOfStreet string `json:"side_of_street,omitempty"`

	// The name of the street where this segment's curb starts. `distance_start_meters` and
	// `distance_end_meters` are measured from the intersection with street.
	//
	// If `start_street_name` is "DEAD END", this curb starts at a dead end. If
	// `start_street_name` is the same as `street_name`, this curb starts somewhere other than
	// an intersection between two named streets. For instance, this could mean that the street
	// splits.
	//
	StartStreetName string `json:"start_street_name,omitempty"`

	// The name of the street that this segment is on.
	StreetName string `json:"street_name,omitempty"`

	// The time zone (see https://www.iana.org/time-zones) that this rule's times are in.
	//
	TimeZone string `json:"time_zone,omitempty"`
}

// Validate validates this segment metadata
func (m *SegmentMetadata) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSideOfStreet(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var segmentMetadataTypeSideOfStreetPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["N","NE","E","SE","S","SW","W","NW"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		segmentMetadataTypeSideOfStreetPropEnum = append(segmentMetadataTypeSideOfStreetPropEnum, v)
	}
}

const (

	// SegmentMetadataSideOfStreetN captures enum value "N"
	SegmentMetadataSideOfStreetN string = "N"

	// SegmentMetadataSideOfStreetNE captures enum value "NE"
	SegmentMetadataSideOfStreetNE string = "NE"

	// SegmentMetadataSideOfStreetE captures enum value "E"
	SegmentMetadataSideOfStreetE string = "E"

	// SegmentMetadataSideOfStreetSE captures enum value "SE"
	SegmentMetadataSideOfStreetSE string = "SE"

	// SegmentMetadataSideOfStreetS captures enum value "S"
	SegmentMetadataSideOfStreetS string = "S"

	// SegmentMetadataSideOfStreetSW captures enum value "SW"
	SegmentMetadataSideOfStreetSW string = "SW"

	// SegmentMetadataSideOfStreetW captures enum value "W"
	SegmentMetadataSideOfStreetW string = "W"

	// SegmentMetadataSideOfStreetNW captures enum value "NW"
	SegmentMetadataSideOfStreetNW string = "NW"
)

// prop value enum
func (m *SegmentMetadata) validateSideOfStreetEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, segmentMetadataTypeSideOfStreetPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *SegmentMetadata) validateSideOfStreet(formats strfmt.Registry) error {

	if swag.IsZero(m.SideOfStreet) { // not required
		return nil
	}

	// value enum
	if err := m.validateSideOfStreetEnum("side_of_street", "body", m.SideOfStreet); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SegmentMetadata) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SegmentMetadata) UnmarshalBinary(b []byte) error {
	var res SegmentMetadata
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
