// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ParkingCondition A condition maps a set of circumstances (times, days, positions)
// to the parking rules that apply under those circumstances.
// In order for a condition to apply, *all* of the specified circumstances
// must hold. For a given parking location, the current rules
// are determined by the first matching condition.
//
// swagger:model ParkingCondition
type ParkingCondition struct {

	// The time, in seconds after the UTC Unix epoch, this condition stops
	// applying.
	//
	AbsoluteTimeEndTs int64 `json:"absolute_time_end_ts,omitempty"`

	// The time, in seconds after the UTC Unix epoch, this condition starts
	// applying. If both `day_times` and `absolute_time_start`/`absolute_time_end`
	// are specified, the condition will only apply when _both_ of them hold
	// (e.g., it could specify 8am-8pm weekdays for the next 2 months).
	//
	AbsoluteTimeStartTs int64 `json:"absolute_time_start_ts,omitempty"`

	// The times of day and days of the week this condition applies. If
	// multiple are specified, the condition applies during all of them.
	//
	DayTimes []*TimeAndDay `json:"day_times"`

	// An identifier for this condition, unique within its ParkingLocationDetails.
	//
	ID int64 `json:"id,omitempty"`

	// rule
	// Required: true
	Rule *ParkingRule `json:"rule"`
}

// Validate validates this parking condition
func (m *ParkingCondition) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDayTimes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRule(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ParkingCondition) validateDayTimes(formats strfmt.Registry) error {

	if swag.IsZero(m.DayTimes) { // not required
		return nil
	}

	for i := 0; i < len(m.DayTimes); i++ {
		if swag.IsZero(m.DayTimes[i]) { // not required
			continue
		}

		if m.DayTimes[i] != nil {
			if err := m.DayTimes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("day_times" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ParkingCondition) validateRule(formats strfmt.Registry) error {

	if err := validate.Required("rule", "body", m.Rule); err != nil {
		return err
	}

	if m.Rule != nil {
		if err := m.Rule.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rule")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ParkingCondition) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ParkingCondition) UnmarshalBinary(b []byte) error {
	var res ParkingCondition
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
