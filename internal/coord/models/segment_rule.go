// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"

	common_models "github.com/coordcity/go/common/models"
)

// SegmentRule The rules that apply along a particular segment of a curb during certain time periods.
//
// swagger:model SegmentRule
type SegmentRule struct {

	// The longest a vehicle may remain at this curb while engaged in a permitted use, in
	// hours.
	//
	// If a new rule starts applying before `max_duration_h` has elapsed, the new rule's
	// max_duration_h takes effect, but counting from when the vehicle first arrived.
	// For instance, If a curb had 2-hour parking until 5pm but 3-hour parking thereafter, and
	// a vehicle arrived at 4pm, they could continue parking until 7pm.
	//
	MaxDurationH float64 `json:"max_duration_h,omitempty"`

	// The uses that are permitted for vehicles not of this segment's primary vehicle type.
	//
	OtherVehiclesPermitted []Uses `json:"other_vehicles_permitted"`

	// All the uses that are permitted, including the primary use.
	Permitted []Uses `json:"permitted"`

	// The price a vehicle must pay while on this segment. In general, this price applies regardless
	// of use or vehicle type.
	//
	// If a new rule starts applying, that rule's prices take effect, but counting from when the
	// vehicle first arrived. For instance, if a curb had:
	//   * Parking at $1 an hour until 8am;
	//   * Parking at $4 for the first hour and $5 for the second hour thereafter,
	// A vehicle arriving at 7am would pay $1 for the first hour and $5 for the second.
	//
	Price []*common_models.PricingRule `json:"price"`

	// primary
	Primary Uses `json:"primary,omitempty"`

	// The reasons that this rule applies at this time.
	Reasons []Reason `json:"reasons"`

	// The days and times of day when this rule applies.
	Times []*common_models.TimeAndDay `json:"times"`

	// vehicle type
	VehicleType VehicleTypes `json:"vehicle_type,omitempty"`
}

// Validate validates this segment rule
func (m *SegmentRule) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateOtherVehiclesPermitted(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePermitted(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrice(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrimary(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReasons(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVehicleType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SegmentRule) validateOtherVehiclesPermitted(formats strfmt.Registry) error {

	if swag.IsZero(m.OtherVehiclesPermitted) { // not required
		return nil
	}

	for i := 0; i < len(m.OtherVehiclesPermitted); i++ {

		if err := m.OtherVehiclesPermitted[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("other_vehicles_permitted" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *SegmentRule) validatePermitted(formats strfmt.Registry) error {

	if swag.IsZero(m.Permitted) { // not required
		return nil
	}

	for i := 0; i < len(m.Permitted); i++ {

		if err := m.Permitted[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("permitted" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *SegmentRule) validatePrice(formats strfmt.Registry) error {

	if swag.IsZero(m.Price) { // not required
		return nil
	}

	for i := 0; i < len(m.Price); i++ {
		if swag.IsZero(m.Price[i]) { // not required
			continue
		}

		if m.Price[i] != nil {
			if err := m.Price[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("price" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SegmentRule) validatePrimary(formats strfmt.Registry) error {

	if swag.IsZero(m.Primary) { // not required
		return nil
	}

	if err := m.Primary.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("primary")
		}
		return err
	}

	return nil
}

func (m *SegmentRule) validateReasons(formats strfmt.Registry) error {

	if swag.IsZero(m.Reasons) { // not required
		return nil
	}

	for i := 0; i < len(m.Reasons); i++ {

		if err := m.Reasons[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("reasons" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *SegmentRule) validateTimes(formats strfmt.Registry) error {

	if swag.IsZero(m.Times) { // not required
		return nil
	}

	for i := 0; i < len(m.Times); i++ {
		if swag.IsZero(m.Times[i]) { // not required
			continue
		}

		if m.Times[i] != nil {
			if err := m.Times[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("times" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SegmentRule) validateVehicleType(formats strfmt.Registry) error {

	if swag.IsZero(m.VehicleType) { // not required
		return nil
	}

	if err := m.VehicleType.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("vehicle_type")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SegmentRule) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SegmentRule) UnmarshalBinary(b []byte) error {
	var res SegmentRule
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
