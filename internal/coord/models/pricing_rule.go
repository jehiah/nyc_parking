// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PricingRule pricing rule
// swagger:model PricingRule
type PricingRule struct {

	// The number of hours you must have parked here when this price stops
	// applying. If not set or non-positive, the price applies for any
	// duration.
	//
	EndDurationH float64 `json:"end_duration_h,omitempty"`

	// The increment of number of hours a person MUST pay for from this bucket if they wish to
	// utilize any duration in this bucket. For instance, if `minimum_hours_paid` is 1 in a 5
	// hour bucket, a parker must pay a whole hour's price for any fraction of an hour used.
	//
	MinimumHoursPaid float64 `json:"minimum_hours_paid,omitempty"`

	// The price, per hour, to park here. If 0, parking is free.
	//
	// Required: true
	PricePerHour *Money `json:"price_per_hour"`

	// The number of hours you must have parked here before this price starts
	// to apply.
	//
	StartDurationH float64 `json:"start_duration_h,omitempty"`
}

// Validate validates this pricing rule
func (m *PricingRule) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePricePerHour(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PricingRule) validatePricePerHour(formats strfmt.Registry) error {

	if err := validate.Required("price_per_hour", "body", m.PricePerHour); err != nil {
		return err
	}

	if m.PricePerHour != nil {
		if err := m.PricePerHour.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("price_per_hour")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PricingRule) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PricingRule) UnmarshalBinary(b []byte) error {
	var res PricingRule
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
