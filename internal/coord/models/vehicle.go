// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Vehicle Identifying information about a car. At least one of the top level fields should be set.
// We currently assume that each user maps 1-1 to a vehicle.
//
// swagger:model Vehicle
type Vehicle struct {

	// license plate
	LicensePlate *VehicleLicensePlate `json:"license_plate,omitempty"`
}

// Validate validates this vehicle
func (m *Vehicle) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLicensePlate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Vehicle) validateLicensePlate(formats strfmt.Registry) error {

	if swag.IsZero(m.LicensePlate) { // not required
		return nil
	}

	if m.LicensePlate != nil {
		if err := m.LicensePlate.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("license_plate")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Vehicle) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Vehicle) UnmarshalBinary(b []byte) error {
	var res Vehicle
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// VehicleLicensePlate Information pertaining to a specific license plate.
// swagger:model VehicleLicensePlate
type VehicleLicensePlate struct {

	// The ISO 3166 country code of the plate.
	// Required: true
	Country string `json:"country"`

	// The ISO 3166-2 subdivision assigned code of the issuing subdivision, if any.
	// For instance, "NY" for New York license plates. For license plates not issued by
	// a subdivision (such as diplomatic license plates), leave this blank.
	//
	// Required: true
	Subdivision string `json:"subdivision"`

	// The actual main text of the plate, lowercase, with no spaces.
	// Required: true
	Text string `json:"text"`
}

// Validate validates this vehicle license plate
func (m *VehicleLicensePlate) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCountry(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubdivision(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateText(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VehicleLicensePlate) validateCountry(formats strfmt.Registry) error {

	if err := validate.RequiredString("license_plate"+"."+"country", "body", string(m.Country)); err != nil {
		return err
	}

	return nil
}

func (m *VehicleLicensePlate) validateSubdivision(formats strfmt.Registry) error {

	if err := validate.RequiredString("license_plate"+"."+"subdivision", "body", string(m.Subdivision)); err != nil {
		return err
	}

	return nil
}

func (m *VehicleLicensePlate) validateText(formats strfmt.Registry) error {

	if err := validate.RequiredString("license_plate"+"."+"text", "body", string(m.Text)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *VehicleLicensePlate) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VehicleLicensePlate) UnmarshalBinary(b []byte) error {
	var res VehicleLicensePlate
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
