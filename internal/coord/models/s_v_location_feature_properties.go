// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SVLocationFeatureProperties s v location feature properties
// swagger:model SVLocationFeatureProperties
type SVLocationFeatureProperties struct {

	// Whether or not the location is currently renting vehicles.
	// Required: true
	IsRenting *bool `json:"is_renting"`

	// Whether or not the location is accepting returns.
	IsReturning bool `json:"is_returning,omitempty"`

	// The last time the location's information was checked, in ISO-8601 format.
	// Required: true
	// Format: date-time
	LastReported *strfmt.DateTime `json:"last_reported"`

	// Latitude of the bike location.
	// Required: true
	Lat *float64 `json:"lat"`

	// The ID of the location. This is a GBFS station_id or bike_id.
	// Required: true
	LocationID *string `json:"location_id"`

	// location type
	// Required: true
	LocationType *SVLocationType `json:"location_type"`

	// Longitude of the bike location.
	// Required: true
	Lon *float64 `json:"lon"`

	// The name of the location.
	// Required: true
	Name *string `json:"name"`

	// The number of vehicles that the location has available for rent.
	// Named "num_bikes_available" for compatibility with GBFS, but counts all vehicles,
	// regardless of type.
	//
	// Required: true
	NumBikesAvailable *int64 `json:"num_bikes_available"`

	// The number of docks that the location has available for returns.
	NumDocksAvailable int64 `json:"num_docks_available,omitempty"`

	// The region ID string for the location.
	RegionID *string `json:"region_id,omitempty"`

	// The ID of the system this location is part of.
	// Required: true
	SystemID *string `json:"system_id"`

	// A map from vehicle type to the number of vehicles of that type that are available at this
	// location, e.g., `{"manual_bike": 9, "pedal_assist_bike": 1}`
	//
	VehiclesAvailable map[string]int64 `json:"vehicles_available,omitempty"`
}

// Validate validates this s v location feature properties
func (m *SVLocationFeatureProperties) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateIsRenting(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastReported(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLat(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLocationID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLocationType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLon(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNumBikesAvailable(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSystemID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SVLocationFeatureProperties) validateIsRenting(formats strfmt.Registry) error {

	if err := validate.Required("is_renting", "body", m.IsRenting); err != nil {
		return err
	}

	return nil
}

func (m *SVLocationFeatureProperties) validateLastReported(formats strfmt.Registry) error {

	if err := validate.Required("last_reported", "body", m.LastReported); err != nil {
		return err
	}

	if err := validate.FormatOf("last_reported", "body", "date-time", m.LastReported.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *SVLocationFeatureProperties) validateLat(formats strfmt.Registry) error {

	if err := validate.Required("lat", "body", m.Lat); err != nil {
		return err
	}

	return nil
}

func (m *SVLocationFeatureProperties) validateLocationID(formats strfmt.Registry) error {

	if err := validate.Required("location_id", "body", m.LocationID); err != nil {
		return err
	}

	return nil
}

func (m *SVLocationFeatureProperties) validateLocationType(formats strfmt.Registry) error {

	if err := validate.Required("location_type", "body", m.LocationType); err != nil {
		return err
	}

	if m.LocationType != nil {
		if err := m.LocationType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("location_type")
			}
			return err
		}
	}

	return nil
}

func (m *SVLocationFeatureProperties) validateLon(formats strfmt.Registry) error {

	if err := validate.Required("lon", "body", m.Lon); err != nil {
		return err
	}

	return nil
}

func (m *SVLocationFeatureProperties) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *SVLocationFeatureProperties) validateNumBikesAvailable(formats strfmt.Registry) error {

	if err := validate.Required("num_bikes_available", "body", m.NumBikesAvailable); err != nil {
		return err
	}

	return nil
}

func (m *SVLocationFeatureProperties) validateSystemID(formats strfmt.Registry) error {

	if err := validate.Required("system_id", "body", m.SystemID); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SVLocationFeatureProperties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SVLocationFeatureProperties) UnmarshalBinary(b []byte) error {
	var res SVLocationFeatureProperties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
