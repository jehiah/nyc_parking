// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// PaymentMethodType Payment method type. Includes cash payments and credit card network payments.
// This list will grow over time.
//
// swagger:model PaymentMethodType
type PaymentMethodType string

const (

	// PaymentMethodTypeUNKNOWNPAYMENTMETHOD captures enum value "UNKNOWN_PAYMENT_METHOD"
	PaymentMethodTypeUNKNOWNPAYMENTMETHOD PaymentMethodType = "UNKNOWN_PAYMENT_METHOD"

	// PaymentMethodTypeCASH captures enum value "CASH"
	PaymentMethodTypeCASH PaymentMethodType = "CASH"

	// PaymentMethodTypeVISA captures enum value "VISA"
	PaymentMethodTypeVISA PaymentMethodType = "VISA"

	// PaymentMethodTypeMASTERCARD captures enum value "MASTERCARD"
	PaymentMethodTypeMASTERCARD PaymentMethodType = "MASTERCARD"

	// PaymentMethodTypeAMERICANEXPRESS captures enum value "AMERICAN_EXPRESS"
	PaymentMethodTypeAMERICANEXPRESS PaymentMethodType = "AMERICAN_EXPRESS"

	// PaymentMethodTypeDISCOVERCARD captures enum value "DISCOVER_CARD"
	PaymentMethodTypeDISCOVERCARD PaymentMethodType = "DISCOVER_CARD"

	// PaymentMethodTypeAIRTELMONEY captures enum value "AIRTEL_MONEY"
	PaymentMethodTypeAIRTELMONEY PaymentMethodType = "AIRTEL_MONEY"

	// PaymentMethodTypeALIPAY captures enum value "ALIPAY"
	PaymentMethodTypeALIPAY PaymentMethodType = "ALIPAY"

	// PaymentMethodTypeANDROIDPAY captures enum value "ANDROID_PAY"
	PaymentMethodTypeANDROIDPAY PaymentMethodType = "ANDROID_PAY"

	// PaymentMethodTypeBAIDUWALLET captures enum value "BAIDU_WALLET"
	PaymentMethodTypeBAIDUWALLET PaymentMethodType = "BAIDU_WALLET"

	// PaymentMethodTypeJCBCARD captures enum value "JCB_CARD"
	PaymentMethodTypeJCBCARD PaymentMethodType = "JCB_CARD"

	// PaymentMethodTypeLIANLIANCARD captures enum value "LIAN_LIAN_CARD"
	PaymentMethodTypeLIANLIANCARD PaymentMethodType = "LIAN_LIAN_CARD"

	// PaymentMethodTypeMAESTROCARD captures enum value "MAESTRO_CARD"
	PaymentMethodTypeMAESTROCARD PaymentMethodType = "MAESTRO_CARD"

	// PaymentMethodTypePAYPAL captures enum value "PAYPAL"
	PaymentMethodTypePAYPAL PaymentMethodType = "PAYPAL"

	// PaymentMethodTypePAYTMCARD captures enum value "PAYTM_CARD"
	PaymentMethodTypePAYTMCARD PaymentMethodType = "PAYTM_CARD"

	// PaymentMethodTypeUCHARGE captures enum value "UCHARGE"
	PaymentMethodTypeUCHARGE PaymentMethodType = "UCHARGE"

	// PaymentMethodTypeUNIONPAYCARD captures enum value "UNIONPAY_CARD"
	PaymentMethodTypeUNIONPAYCARD PaymentMethodType = "UNIONPAY_CARD"

	// PaymentMethodTypeZAAKPAY captures enum value "ZAAKPAY"
	PaymentMethodTypeZAAKPAY PaymentMethodType = "ZAAKPAY"
)

// for schema
var paymentMethodTypeEnum []interface{}

func init() {
	var res []PaymentMethodType
	if err := json.Unmarshal([]byte(`["UNKNOWN_PAYMENT_METHOD","CASH","VISA","MASTERCARD","AMERICAN_EXPRESS","DISCOVER_CARD","AIRTEL_MONEY","ALIPAY","ANDROID_PAY","BAIDU_WALLET","JCB_CARD","LIAN_LIAN_CARD","MAESTRO_CARD","PAYPAL","PAYTM_CARD","UCHARGE","UNIONPAY_CARD","ZAAKPAY"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		paymentMethodTypeEnum = append(paymentMethodTypeEnum, v)
	}
}

func (m PaymentMethodType) validatePaymentMethodTypeEnum(path, location string, value PaymentMethodType) error {
	if err := validate.Enum(path, location, value, paymentMethodTypeEnum); err != nil {
		return err
	}
	return nil
}

// Validate validates this payment method type
func (m PaymentMethodType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validatePaymentMethodTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
