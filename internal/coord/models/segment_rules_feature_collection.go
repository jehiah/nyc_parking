// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SegmentRulesFeatureCollection A collection of segment rules features.
// swagger:model SegmentRulesFeatureCollection
type SegmentRulesFeatureCollection struct {

	// features
	Features []*SegmentRulesFeature `json:"features"`

	// no curbs reason
	NoCurbsReason NoCurbsReason `json:"no_curbs_reason,omitempty"`

	// type
	// Enum: [FeatureCollection]
	Type string `json:"type,omitempty"`
}

// Validate validates this segment rules feature collection
func (m *SegmentRulesFeatureCollection) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFeatures(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNoCurbsReason(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SegmentRulesFeatureCollection) validateFeatures(formats strfmt.Registry) error {

	if swag.IsZero(m.Features) { // not required
		return nil
	}

	for i := 0; i < len(m.Features); i++ {
		if swag.IsZero(m.Features[i]) { // not required
			continue
		}

		if m.Features[i] != nil {
			if err := m.Features[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("features" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SegmentRulesFeatureCollection) validateNoCurbsReason(formats strfmt.Registry) error {

	if swag.IsZero(m.NoCurbsReason) { // not required
		return nil
	}

	if err := m.NoCurbsReason.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("no_curbs_reason")
		}
		return err
	}

	return nil
}

var segmentRulesFeatureCollectionTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["FeatureCollection"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		segmentRulesFeatureCollectionTypeTypePropEnum = append(segmentRulesFeatureCollectionTypeTypePropEnum, v)
	}
}

const (

	// SegmentRulesFeatureCollectionTypeFeatureCollection captures enum value "FeatureCollection"
	SegmentRulesFeatureCollectionTypeFeatureCollection string = "FeatureCollection"
)

// prop value enum
func (m *SegmentRulesFeatureCollection) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, segmentRulesFeatureCollectionTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *SegmentRulesFeatureCollection) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SegmentRulesFeatureCollection) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SegmentRulesFeatureCollection) UnmarshalBinary(b []byte) error {
	var res SegmentRulesFeatureCollection
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
