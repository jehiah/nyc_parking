// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// Reason A reason for a rule to apply to a given segment of a curb. Reasons include:
//   * **sign**: A sign specified this regulation.
//   * **paint**: Curb paint specified this regulation.
//   * **meter**: A parking meter (single-space or full-block) specified this regulation.
//   * **curb_cut**: There is a curb cut in this segment.
//   * **curb_extension**: There is a curb extension (bulbout or neckdown) in this segment.
//   * **hydrant**: There is a fire hydrant in or near this segment.
//   * **bus_stop**: There is a bus stop in or near this segment.
//   * **intersection**: This space is too close to an intersection.
//   * **no_pedestrian_access**: You can't walk along this curb.
//   * **lane** The curb lane is designated for a specific use (like a bike lane, a bus lane,
//     or a right turn lane).
//   * **construction**: There is construction here that takes up the curb lane.
//   * **event**: There is an event or other temporary change that applies to this segment.
//
// swagger:model Reason
type Reason string

const (

	// ReasonSign captures enum value "sign"
	ReasonSign Reason = "sign"

	// ReasonPaint captures enum value "paint"
	ReasonPaint Reason = "paint"

	// ReasonMeter captures enum value "meter"
	ReasonMeter Reason = "meter"

	// ReasonCurbCut captures enum value "curb_cut"
	ReasonCurbCut Reason = "curb_cut"

	// ReasonCurbExtension captures enum value "curb_extension"
	ReasonCurbExtension Reason = "curb_extension"

	// ReasonHydrant captures enum value "hydrant"
	ReasonHydrant Reason = "hydrant"

	// ReasonBusStop captures enum value "bus_stop"
	ReasonBusStop Reason = "bus_stop"

	// ReasonIntersection captures enum value "intersection"
	ReasonIntersection Reason = "intersection"

	// ReasonNoPedestrianAccess captures enum value "no_pedestrian_access"
	ReasonNoPedestrianAccess Reason = "no_pedestrian_access"

	// ReasonLane captures enum value "lane"
	ReasonLane Reason = "lane"

	// ReasonConstruction captures enum value "construction"
	ReasonConstruction Reason = "construction"

	// ReasonEvent captures enum value "event"
	ReasonEvent Reason = "event"
)

// for schema
var reasonEnum []interface{}

func init() {
	var res []Reason
	if err := json.Unmarshal([]byte(`["sign","paint","meter","curb_cut","curb_extension","hydrant","bus_stop","intersection","no_pedestrian_access","lane","construction","event"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		reasonEnum = append(reasonEnum, v)
	}
}

func (m Reason) validateReasonEnum(path, location string, value Reason) error {
	if err := validate.Enum(path, location, value, reasonEnum); err != nil {
		return err
	}
	return nil
}

// Validate validates this reason
func (m Reason) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateReasonEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
