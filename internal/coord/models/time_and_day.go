// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TimeAndDay An interval of time that repeats every week on certain days. For instance, a TimeAndDay
// could represent 7AM-9PM on weekdays as
// `{"days": [1, 2, 3, 4, 5], "time_of_day_start": "07:00", "time_end": "19:00"}`
// (day 0 is Sunday).
//
// swagger:model TimeAndDay
type TimeAndDay struct {

	// The day of year (as a `mm-dd` string where 1 < mm < 12 and 1 < dd < 31)
	// this condition stops being valid.
	//
	DayOfYearEnd *string `json:"day_of_year_end,omitempty"`

	// The day of year (as a `mm-dd` string where 1 < mm < 12 and 1 < dd < 31)
	// this condition starts to apply.
	//
	DayOfYearStart *string `json:"day_of_year_start,omitempty"`

	// The days of week this condition applies (0=Sunday)
	Days []*int32 `json:"days"`

	// The time of day (as a 24-hour `HH:MM` string) this TimeAndDay ends.
	// If this `TimeAndDay` ends at midnight, `time_of_day_end` will be `24:00`.
	//
	TimeOfDayEnd string `json:"time_of_day_end,omitempty"`

	// The time of day (as a 24-hour `HH:MM` string) this TimeAndDay begins.
	// If this `TimeAndDay` starts at midnight, `time_of_day_start` will be `00:00`.
	//
	TimeOfDayStart string `json:"time_of_day_start,omitempty"`
}

// Validate validates this time and day
func (m *TimeAndDay) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDays(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TimeAndDay) validateDays(formats strfmt.Registry) error {

	if swag.IsZero(m.Days) { // not required
		return nil
	}

	for i := 0; i < len(m.Days); i++ {
		if swag.IsZero(m.Days[i]) { // not required
			continue
		}

		if err := validate.MinimumInt("days"+"."+strconv.Itoa(i), "body", int64(*m.Days[i]), 0, false); err != nil {
			return err
		}

		if err := validate.MaximumInt("days"+"."+strconv.Itoa(i), "body", int64(*m.Days[i]), 6, false); err != nil {
			return err
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *TimeAndDay) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TimeAndDay) UnmarshalBinary(b []byte) error {
	var res TimeAndDay
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
