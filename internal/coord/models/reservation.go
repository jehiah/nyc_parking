// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	common_models "github.com/coordcity/go/common/models"
)

// Reservation A single reservation for a resource.
// swagger:model Reservation
type Reservation struct {

	// The duration of the reservation, in minutes.
	DurationM int32 `json:"duration_m,omitempty"`

	// The auto-assigned id of the reservation.
	ID int64 `json:"id,omitempty"`

	// The ISO-8601 formatted string representing the time after which this reservation should
	// not be taken into account. This is only taken into account for reservations with
	// status == lease.
	//
	// Format: date-time
	LeaseExpirationTime *strfmt.DateTime `json:"lease_expiration_time,omitempty"`

	// The specific plate this reservation is for.
	Plate *Plate `json:"plate,omitempty"`

	// Text identifying the specific resource that's being reserved/used. This could be a stall
	// number for a car in a parking lot, a charger number, and pump number, etc.
	//
	ResourceID string `json:"resource_id,omitempty"`

	// The ISO-8601 formatted string representing the start time of the session.
	// Format: date-time
	StartTime strfmt.DateTime `json:"start_time,omitempty"`

	// status
	// Enum: [lease paid unpaid canceled]
	Status *string `json:"status,omitempty"`

	// The id of the customer that owns this reservation. This maps to a User object in the DB.
	//
	UserID int64 `json:"user_id,omitempty"`

	// Information useful in identifying the vehicle the reservation is associated with.
	//
	VehicleID *common_models.Vehicle `json:"vehicle_id,omitempty"`
}

// Validate validates this reservation
func (m *Reservation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLeaseExpirationTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePlate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVehicleID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Reservation) validateLeaseExpirationTime(formats strfmt.Registry) error {

	if swag.IsZero(m.LeaseExpirationTime) { // not required
		return nil
	}

	if err := validate.FormatOf("lease_expiration_time", "body", "date-time", m.LeaseExpirationTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Reservation) validatePlate(formats strfmt.Registry) error {

	if swag.IsZero(m.Plate) { // not required
		return nil
	}

	if m.Plate != nil {
		if err := m.Plate.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("plate")
			}
			return err
		}
	}

	return nil
}

func (m *Reservation) validateStartTime(formats strfmt.Registry) error {

	if swag.IsZero(m.StartTime) { // not required
		return nil
	}

	if err := validate.FormatOf("start_time", "body", "date-time", m.StartTime.String(), formats); err != nil {
		return err
	}

	return nil
}

var reservationTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["lease","paid","unpaid","canceled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		reservationTypeStatusPropEnum = append(reservationTypeStatusPropEnum, v)
	}
}

const (

	// ReservationStatusLease captures enum value "lease"
	ReservationStatusLease string = "lease"

	// ReservationStatusPaid captures enum value "paid"
	ReservationStatusPaid string = "paid"

	// ReservationStatusUnpaid captures enum value "unpaid"
	ReservationStatusUnpaid string = "unpaid"

	// ReservationStatusCanceled captures enum value "canceled"
	ReservationStatusCanceled string = "canceled"
)

// prop value enum
func (m *Reservation) validateStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, reservationTypeStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Reservation) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", *m.Status); err != nil {
		return err
	}

	return nil
}

func (m *Reservation) validateVehicleID(formats strfmt.Registry) error {

	if swag.IsZero(m.VehicleID) { // not required
		return nil
	}

	if m.VehicleID != nil {
		if err := m.VehicleID.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vehicle_id")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Reservation) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Reservation) UnmarshalBinary(b []byte) error {
	var res Reservation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
