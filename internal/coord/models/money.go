// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Money An amount of money specified in terms of an ISO4217 currency code and an amount in the
// _smallest denomination_ of the currency.
//
// For example, 12 dollars and 34 cents (USD) would be represented as:
// ```
// {
//   "currency": "USD",
//   "amount": 1234
// }
// ```
//
// swagger:model Money
type Money struct {

	// The total amount in the _smallest denomination_ of the specified currency.
	//
	Amount *int64 `json:"amount,omitempty"`

	// The ISO4217 currency code.
	// Enum: [USD]
	Currency string `json:"currency,omitempty"`
}

// Validate validates this money
func (m *Money) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCurrency(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var moneyTypeCurrencyPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["USD"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		moneyTypeCurrencyPropEnum = append(moneyTypeCurrencyPropEnum, v)
	}
}

const (

	// MoneyCurrencyUSD captures enum value "USD"
	MoneyCurrencyUSD string = "USD"
)

// prop value enum
func (m *Money) validateCurrencyEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, moneyTypeCurrencyPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Money) validateCurrency(formats strfmt.Registry) error {

	if swag.IsZero(m.Currency) { // not required
		return nil
	}

	// value enum
	if err := m.validateCurrencyEnum("currency", "body", m.Currency); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Money) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Money) UnmarshalBinary(b []byte) error {
	var res Money
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
