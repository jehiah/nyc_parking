// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ParkingRate A single rate.
// swagger:model ParkingRate
type ParkingRate struct {

	// The ISO-8601 formatted string representing the time this rate stops taking effect. If
	// blank, it never expires.
	//
	// Format: date-time
	AbsoluteEndTime *strfmt.DateTime `json:"absolute_end_time,omitempty"`

	// The ISO-8601 formatted string representing the this rate starts taking effect. If blank,
	// it takes effect immediately.
	//
	// Format: date-time
	AbsoluteStartTime *strfmt.DateTime `json:"absolute_start_time,omitempty"`

	// The _end_ of the window of time during which a car must arrive for this rate to
	// apply. This must be formatted as a 24-hour `HH:MM` string.
	//
	ArrivalWindowEnd *string `json:"arrival_window_end,omitempty"`

	// The _start_ of the window of time during which a car must arrive for this rate to
	// apply. This must be formatted as a 24-hour `HH:MM` string.
	//
	ArrivalWindowStart *string `json:"arrival_window_start,omitempty"`

	// The days of week this rate applies. At least one must be specified.
	Days []*int32 `json:"days"`

	// The _end_ of the window of time during which a car must depart for this rate to apply. This must be formatted as a 48-hour `HH:MM` string. This can "leak" into the next day. For example `25:00` may be used to represent 1:00AM the next day.
	DepartureWindowEnd *string `json:"departure_window_end,omitempty"`

	// The _start_ of the window of time during which a car must depart for this rate to
	// apply. This must be formatted as a 48-hour `HH:MM` string. This can "leak" into the next
	// day. For example, `25:00` may be used to represent 1:00AM the next day.
	//
	DepartureWindowStart *string `json:"departure_window_start,omitempty"`

	// The maximum duration that this rate applies to, in minutes. Any duration greater will
	// have to use a different rate.
	//
	MaxDurationM *int32 `json:"max_duration_m,omitempty"`

	// Short name for the rate. e.g., 'Early Bird Special'. This may be left blank.
	Name string `json:"name,omitempty"`

	// price
	Price *Money `json:"price,omitempty"`

	// The type of rate.
	//   * If a `flat_rate` matches, the parker will be charged this rate regardless of any
	//   other rates matched. If muliple `flat_rate` rates match, the most expensive one wins.
	//   This is useful for special events.
	//   * If a `max_pay` matches, the parker will be charged at MOST this rate, but may be
	//   charged less if another matching rate is cheaper. This is useful for early-bird and
	//   night specials.
	//
	// Enum: [flat_rate max_pay]
	RateType *string `json:"rate_type,omitempty"`

	// The time of day (formatted as a 24-hour `HH:MM` string) up until this rate applies.
	// It's an error to set this if `max_duration_m` is set.
	//
	Until *string `json:"until,omitempty"`
}

// Validate validates this parking rate
func (m *ParkingRate) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAbsoluteEndTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAbsoluteStartTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDays(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrice(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ParkingRate) validateAbsoluteEndTime(formats strfmt.Registry) error {

	if swag.IsZero(m.AbsoluteEndTime) { // not required
		return nil
	}

	if err := validate.FormatOf("absolute_end_time", "body", "date-time", m.AbsoluteEndTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ParkingRate) validateAbsoluteStartTime(formats strfmt.Registry) error {

	if swag.IsZero(m.AbsoluteStartTime) { // not required
		return nil
	}

	if err := validate.FormatOf("absolute_start_time", "body", "date-time", m.AbsoluteStartTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ParkingRate) validateDays(formats strfmt.Registry) error {

	if swag.IsZero(m.Days) { // not required
		return nil
	}

	for i := 0; i < len(m.Days); i++ {
		if swag.IsZero(m.Days[i]) { // not required
			continue
		}

		if err := validate.MinimumInt("days"+"."+strconv.Itoa(i), "body", int64(*m.Days[i]), 0, false); err != nil {
			return err
		}

		if err := validate.MaximumInt("days"+"."+strconv.Itoa(i), "body", int64(*m.Days[i]), 6, false); err != nil {
			return err
		}

	}

	return nil
}

func (m *ParkingRate) validatePrice(formats strfmt.Registry) error {

	if swag.IsZero(m.Price) { // not required
		return nil
	}

	if m.Price != nil {
		if err := m.Price.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("price")
			}
			return err
		}
	}

	return nil
}

var parkingRateTypeRateTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["flat_rate","max_pay"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		parkingRateTypeRateTypePropEnum = append(parkingRateTypeRateTypePropEnum, v)
	}
}

const (

	// ParkingRateRateTypeFlatRate captures enum value "flat_rate"
	ParkingRateRateTypeFlatRate string = "flat_rate"

	// ParkingRateRateTypeMaxPay captures enum value "max_pay"
	ParkingRateRateTypeMaxPay string = "max_pay"
)

// prop value enum
func (m *ParkingRate) validateRateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, parkingRateTypeRateTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ParkingRate) validateRateType(formats strfmt.Registry) error {

	if swag.IsZero(m.RateType) { // not required
		return nil
	}

	// value enum
	if err := m.validateRateTypeEnum("rate_type", "body", *m.RateType); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ParkingRate) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ParkingRate) UnmarshalBinary(b []byte) error {
	var res ParkingRate
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
