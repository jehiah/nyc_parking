// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// MultiPolygonGeometry A GeoJSON MultiPolygon geometry.
// swagger:model MultiPolygonGeometry
type MultiPolygonGeometry struct {

	// coordinates
	// Required: true
	Coordinates [][][][]float64 `json:"coordinates"`

	// type
	// Required: true
	// Enum: [MultiPolygon]
	Type *string `json:"type"`
}

// Validate validates this multi polygon geometry
func (m *MultiPolygonGeometry) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCoordinates(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MultiPolygonGeometry) validateCoordinates(formats strfmt.Registry) error {

	if err := validate.Required("coordinates", "body", m.Coordinates); err != nil {
		return err
	}

	for i := 0; i < len(m.Coordinates); i++ {

		for ii := 0; ii < len(m.Coordinates[i]); ii++ {

			for iii := 0; iii < len(m.Coordinates[i][ii]); iii++ {

				iiiiCoordinatesSize := int64(len(m.Coordinates[i][ii][iii]))

				if err := validate.MinItems("coordinates"+"."+strconv.Itoa(i)+"."+strconv.Itoa(ii)+"."+strconv.Itoa(iii), "body", iiiiCoordinatesSize, 2); err != nil {
					return err
				}

				if err := validate.MaxItems("coordinates"+"."+strconv.Itoa(i)+"."+strconv.Itoa(ii)+"."+strconv.Itoa(iii), "body", iiiiCoordinatesSize, 2); err != nil {
					return err
				}

			}

		}

	}

	return nil
}

var multiPolygonGeometryTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["MultiPolygon"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		multiPolygonGeometryTypeTypePropEnum = append(multiPolygonGeometryTypeTypePropEnum, v)
	}
}

const (

	// MultiPolygonGeometryTypeMultiPolygon captures enum value "MultiPolygon"
	MultiPolygonGeometryTypeMultiPolygon string = "MultiPolygon"
)

// prop value enum
func (m *MultiPolygonGeometry) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, multiPolygonGeometryTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *MultiPolygonGeometry) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MultiPolygonGeometry) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MultiPolygonGeometry) UnmarshalBinary(b []byte) error {
	var res MultiPolygonGeometry
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
